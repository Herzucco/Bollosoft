/**
 * Created by Adrien on 10/10/2015.
 */
var ps = require('prop-search');
var os = require('object-search');
var rf = require('read-file');
var $ = require('string');

var fileKey = 'file';

function parseTxtFile(source){
    var chunks = source.split('***');
    return chunks;
}

module.exports = function bundle(source){
    source = JSON.parse(source);
    
    var referencesArray = ps.searchForExistence(source, fileKey);

    for(var i = 0; i < referencesArray.length; i++){
        var path = referencesArray[i].path;
        path.pop();
        path = path.join('.');

        var rootNode = referencesArray[i].value[0];
        var fileObject = rootNode[fileKey];

        rootNode[fileKey] = undefined;
        var text = [];
        for(var k in fileObject){
            var compute = this.context + '/' + fileObject[k];
            var file = rf.sync(compute, 'utf8');
            var chunks = parseTxtFile(file);

            for(var x = 0; x < chunks.length; x++){
                if(text[x] === undefined){
                    text[x] = JSON.parse(JSON.stringify(rootNode));
                }

                var talker = $(chunks[x]).between('[', ']').s;
                var trigger = parseInt($(chunks[x]).between('{', '}').s);

                chunks[x] = $(chunks[x]).strip(talker).s;
                chunks[x] = $(chunks[x]).strip(trigger).s;

                chunks[x] = $(chunks[x]).strip('[]').collapseWhitespace().s;
                chunks[x] = $(chunks[x]).strip('{}').collapseWhitespace().s;

                text[x][k] = chunks[x];
                text[x]['talker'] = talker;

                if(trigger !== undefined && trigger !== null && trigger !== NaN){
                  var triggers = source.triggers;

                  for(var u = 0; u < triggers.length; u++){
                    if(triggers[u].id === trigger){
                      text[x]['style'] = triggers[u].settings;
                    }
                  }
                }else{
                  text[x]['style'] = {};
                }
            }
        }

        text.shift();
        os.set(source, path, text);
    }

    return source;
}
